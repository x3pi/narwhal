#!/bin/bash

# ==============================================================================
# RUN NODE SCRIPT (Ch·∫°y m·ªôt node ƒë·∫ßy ƒë·ªß: Primary + Worker(s) + Executor)
# Phi√™n b·∫£n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ nh·∫•t qu√°n v·ªõi run_nodes.sh
# ==============================================================================

set -e

# --- Nh·∫≠n v√† ki·ªÉm tra tham s·ªë node id ---
if [ -z "$1" ]; then
    echo "‚ùå L·ªói: Vui l√≤ng cung c·∫•p m·ªôt node ID."
    echo "   V√≠ d·ª•: ./run_node_id.sh 0"
    exit 1
fi

# Ki·ªÉm tra xem tham s·ªë c√≥ ph·∫£i l√† s·ªë nguy√™n kh√¥ng
if ! [[ "$1" =~ ^[0-9]+$ ]]; then
    echo "‚ùå L·ªói: Node ID '$1' ph·∫£i l√† m·ªôt s·ªë nguy√™n kh√¥ng √¢m."
    exit 1
fi
NODE_ID=$1

# --- ƒê∆∞·ªùng d·∫´n ---
BENCHMARK_DIR="benchmark"
NODE_BINARY="./target/release/node"
EXECUTOR_BINARY="./go/bin/exetps"

LOG_DIR="$BENCHMARK_DIR/logs"
COMMITTEE_FILE="$BENCHMARK_DIR/.committee.json"
PARAMETERS_FILE="$BENCHMARK_DIR/.parameters.json"
KEY_FILE="$BENCHMARK_DIR/.node-$NODE_ID.json"

# --- Ki·ªÉm tra c√°c file c·∫ßn thi·∫øt ---
for f in "$NODE_BINARY" "$EXECUTOR_BINARY" "$KEY_FILE" "$COMMITTEE_FILE" "$PARAMETERS_FILE"; do
    if [ ! -f "$f" ]; then
        echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file c·∫ßn thi·∫øt: $f"
        echo "   H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ ch·∫°y script setup v√† bi√™n d·ªãch code th√†nh c√¥ng."
        exit 1
    fi
done

mkdir -p "$LOG_DIR"

# --- L·∫•y th√¥ng tin c·∫•u h√¨nh t·ª´ committee file ---
# L·∫•y t√™n c·ªßa authority d·ª±a tr√™n NODE_ID (th·ª© t·ª± trong m·∫£ng keys)
AUTHORITY_NAME=$(jq -r ".authorities | keys[$NODE_ID]" < "$COMMITTEE_FILE")
if [ "$AUTHORITY_NAME" == "null" ]; then
    echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y authority cho Node ID '$NODE_ID' trong file $COMMITTEE_FILE."
    exit 1
fi

# ƒê·∫øm s·ªë l∆∞·ª£ng workers ƒë∆∞·ª£c c·∫•u h√¨nh cho authority n√†y
WORKERS_PER_NODE=$(jq ".authorities.\"$AUTHORITY_NAME\".workers | length" < "$COMMITTEE_FILE")
echo "‚ÑπÔ∏è Th√¥ng tin Node $NODE_ID: T√™n Authority '$AUTHORITY_NAME', S·ªë Workers: $WORKERS_PER_NODE"
echo ""


# --- S·ª¨A L·ªñI: Kh·ªüi ch·∫°y Executor TR∆Ø·ªöC ---
# executor_log="$LOG_DIR/executor-$NODE_ID.log"
# executor_cmd="$EXECUTOR_BINARY --id $NODE_ID"

# echo "üöÄ Kh·ªüi ƒë·ªông Executor-$NODE_ID..."
# tmux new -d -s "executor-$NODE_ID" "sh -c '$executor_cmd > \"$executor_log\" 2>&1 || echo \"[FATAL] Executor exited\" >> \"$executor_log\"'"

# --- S·ª¨A L·ªñI: Th√™m m·ªôt kho·∫£ng ngh·ªâ ng·∫Øn ƒë·ªÉ executor t·∫°o socket ---
sleep 0.2


# --- Kh·ªüi ch·∫°y Primary ---
# S·ª¨A ƒê·ªîI: T√™n DB nh·∫•t qu√°n v·ªõi run_nodes.sh
primary_db="$BENCHMARK_DIR/db-primary-$NODE_ID"
primary_log="$LOG_DIR/primary-$NODE_ID.log"
primary_cmd="$NODE_BINARY run --keys \"$KEY_FILE\" --committee \"$COMMITTEE_FILE\" --store \"$primary_db\" --parameters \"$PARAMETERS_FILE\" primary"

echo "üöÄ Kh·ªüi ƒë·ªông Primary-$NODE_ID..."
tmux new -d -s "primary-$NODE_ID" "sh -c 'RUST_LOG=info $primary_cmd > \"$primary_log\" 2>&1 || echo \"[FATAL] Primary exited\" >> \"$primary_log\"'"


# --- Kh·ªüi ch·∫°y T·∫§T C·∫¢ Workers cho node n√†y ---
for j in $(seq 0 $((WORKERS_PER_NODE-1))); do
    # S·ª¨A ƒê·ªîI: T√™n DB nh·∫•t qu√°n v·ªõi run_nodes.sh
    worker_db="$BENCHMARK_DIR/db-worker-${NODE_ID}-${j}"
    worker_log="$LOG_DIR/worker-${NODE_ID}-${j}.log"
    worker_cmd="$NODE_BINARY run --keys \"$KEY_FILE\" --committee \"$COMMITTEE_FILE\" --store \"$worker_db\" --parameters \"$PARAMETERS_FILE\" worker --id $j"

    echo "üöÄ Kh·ªüi ƒë·ªông Worker-${NODE_ID}-${j}..."
    tmux new -d -s "worker-${NODE_ID}-${j}" "sh -c 'RUST_LOG=info $worker_cmd > \"$worker_log\" 2>&1 || echo \"[FATAL] Worker exited\" >> \"$worker_log\"'"
done


# --- X√¢y d·ª±ng l·ªánh d·ª´ng node ---
kill_cmd="tmux kill-session -t executor-$NODE_ID && tmux kill-session -t primary-$NODE_ID"
log_files_info=""
for j in $(seq 0 $((WORKERS_PER_NODE-1))); do
    kill_cmd="$kill_cmd && tmux kill-session -t worker-${NODE_ID}-${j}"
    log_files_info+="   - Theo d√µi log c·ªßa worker-$j:  tail -f $LOG_DIR/worker-${NODE_ID}-${j}.log\n"
done


echo ""
echo "‚úÖ Node $NODE_ID v√† c√°c th√†nh ph·∫ßn li√™n quan ƒë√£ ƒë∆∞·ª£c kh·ªüi ch·∫°y."
echo "   - Xem c√°c session ƒëang ch·∫°y: tmux ls"
echo "   - Theo d√µi log c·ªßa primary:   tail -f $primary_log"
echo -e "$log_files_info" # D√πng -e ƒë·ªÉ di·ªÖn gi·∫£i k√Ω t·ª± xu·ªëng d√≤ng \n
echo "   - Theo d√µi log c·ªßa executor:  tail -f $executor_log"
echo ""
echo "   - ƒê·ªÉ d·ª´ng node n√†y, ch·∫°y l·ªánh:"
echo "     $kill_cmd"